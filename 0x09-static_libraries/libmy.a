!<arch>
0-isupper.c/    1667975455  1000  1000  100664  231       `
#include "main.h"
/**
*_isupper - check if the string is upper case or lower case
*@c: is comparing value
*Return: 1 if upper 0 elsewise
*/

int _isupper(int c)
{
	if (c >= 65 && c <= 90)
{
	return (1);
}
	else
{
	return (0);
}
}


0-memset.c/     1667975937  1000  1000  100664  320       `
#include "main.h"

/**
 * _memset - fills string with constant char b upto n bytes
 * @s: input pointer to string
 * @b: constant char
 * @n: number of bytes
 * Return: pointer to s string
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i = 0;

	while (i < n)
	{
		s[i] = b;
		i++;
	}
	return (s);
}
0-putchar.c/    1667975286  1000  1000  100664  305       `
#include "main.h"

/**
 * main - the main function print _putchar
 *
 * Description: prints _putchar
 *
 * Return: the function will return to 0 if it works
 */

int main(void)
{
	char word[9] = "_putchar";
	int a = 0;

	for (a = 0; a < 8; a++)
	{
		_putchar(word[a]);
	}
	_putchar('\n');

	return (0);
}

0-strcat.c/     1667976709  1000  1000  100664  359       `
#include "main.h"

/**
 * *_strcat - function to concatinat str
 * @dest: pointer to a char
 * @src: pointer to a char
 * Return: return dest
 */

char *_strcat(char *dest, char *src)
{
	int x;
	int y;

	x = 0;
	y = 0;

	while (dest[x] != '\0')
	{
		x++;
	}

	while (src[y] != '\0')
	{
		dest[x] = src[y];
		y++;
		x++;
	}

	dest[x] = '\0';
	return (dest);
}

100-atoi.c/     1667976112  1000  1000  100664  573       `
#include "main.h"

/**
 * _atoi - converts a string to an integer.
 * @s: input string.
 * Return: integer.
 */
int _atoi(char *s)
{
	unsigned int count = 0, size = 0, oi = 0, pn = 1, m = 1, i;

	while (*(s + count) != '\0')
	{
		if (size > 0 && (*(s + count) < '0' || *(s + count) > '9'))
			break;

		if (*(s + count) == '-')
			pn *= -1;

		if ((*(s + count) >= '0') && (*(s + count) <= '9'))
		{
			if (size > 0)
				m *= 10;
			size++;
		}
		count++;
	}

	for (i = count - size; i < count; i++)
	{
		oi = oi + ((*(s + i) - 48) * m);
		m /= 10;
	}
	return (oi * pn);
}

1-isdigit.c/    1667975455  1000  1000  100664  221       `
#include "main.h"
/**
* _isdigit - chechk if the givern numbr is digit
* @c: is comparing variable
* Return: 1 if digit 0 else
*/
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
{
	return (1);
}
	else
{
	return (0);
}

}


1-memcpy.c/     1667975937  1000  1000  100664  348       `
#include "main.h"

/**
 * _memcpy - input
 * @dest: input pointer to string destination
 * @src: input pointer to source string
 * @n: number of bytes
 * Return: pointer to destination string
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i = 0;

	while (i < n)
	{
		*(dest + i) = *(src + i);
		i++;
	}
	return (dest);
}
1-strncat.c/    1667976791  1000  1000  100664  421       `
#include "main.h"

/**
 * _strncat - concatination
 * @dest : pointer to char
 * @src : pointer to char
 * @n : int para
 * Return: pointer to dust
 */

char *_strncat(char *dest, char *src, int n)
{
	int x;
	int y;

	x = 0;

	for (y = 0; y < 1000; y++)
	{
		if (dest[y] == '\0')
		{
			break;
		}
		x++;
	}

	for (y = 0; src[y] != '\0' && y < n; y++)
	{
		dest[x + y] = src[y];
	}
	dest[x + y] = '\0';
	return (dest);
}

2-strchr.c/     1667975937  1000  1000  100664  321       `
#include "main.h"

/**
 * _strchr - locates a character in a string
 * @s: string input
 * @c: character to find
 * Return: pointer to first occurence of c character
 */

char *_strchr(char *s, char c)
{
	unsigned int i;

	for (i = 0; s[i] != '\0'; i++)
		if (s[i] == c)
			break;
	return (s[i] == c ? (s + i) : '\0');
}

2-strlen.c/     1667975559  1000  1000  100664  203       `
#include "main.h"

/**
 * _strlen - returns length of string
 * @s: string
 * Return: length of string
 */

int _strlen(char *s)
{
	int len = 0;

	while (s[len] != '\0')
	{
		len++;
	}

	return (len);
}

2-strncpy.c/    1667976824  1000  1000  100664  341       `
#include "main.h"

/**
 * _strncpy - string copy
 * @dest : pointer to char
 * @src : pointer to char
 * @n : int par
 * Return: the value of dust
 */

char *_strncpy(char *dest, char *src, int n)
{
	int x;

	for (x = 0; src[x] != '\0' && x < n; x++)
	{
		dest[x] = src[x];
	}

	for ( ; x < n; x++)
	{
		dest[x] = '\0';
	}
	return (dest);
}

3-islower.c/    1667975286  1000  1000  100664  231       `
#include "main.h"

/**
 * _islower - checks for lowercase
 * @l: l is an ascii number for character
 *
 * Return: 1 if lowercase
 */

int _islower(int l)
{
	if (l >= 'a' && l <= 'z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

3-puts.c/       1667975559  1000  1000  100664  217       `
#include "main.h"

/**
 * _puts - prints stringing
 * @string: stringing
 * Return: void
 */

void _puts(char *string)
{
	int i = 0;

	while (string[i] != '\0')
	{
		_putchar(string[i]);
		i++;
	}

	_putchar('\n');
}

3-strcmp.c/     1667976611  1000  1000  100664  307       `
#include "main.h"

/**
 * _strcmp - compare two strings
 * @s1 : pointerto char
 * @s2 : pointer to char
 * Return: the value of dust
 */

int _strcmp(char *s1, char *s2)
{
	int x;
	int y;

	x = 0;

	while (s1[x] == s2[x] && (s1[x] != '\0' || s2[x] != '\0'))
	{
		x++;
	}
	y = s1[x] - s2[x];
	return (y);
}

3-strspn.c/     1667975937  1000  1000  100664  528       `
#include "main.h"

/**
 * _strspn - gets the length of a prefix substring
 * @s: input string to search for substring
 * @accept: characters that prefix substring must include
 * Return: length of prefix substring
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int i, j, a_len = 0, len = 0;

	while (accept[a_len] != '\0')
		a_len++;
	for (i = 0; s[i] != '\0'; i++)
		for (j = 0; j < a_len; j++)
			if (s[i] == accept[j])
				len++, j = a_len;
			else
				if (j == a_len - 1)
					goto exit;
exit: return (len);
}
4-isalpha.c/    1667975286  1000  1000  100664  300       `
#include "main.h"

/**
 * _isalpha - checks for alphabetic character
 * @l: l is an ascii number for character
 *
 * Return: 1 if letter o if not
 */

int _isalpha(int l)
{
	if (l >= 'a' && l <= 'z')
	{
		return (1);
	}
	else if (l >= 'A' && l <= 'Z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
4-strpbrk.c/    1667975937  1000  1000  100664  425       `
#include "main.h"

/**
 * _strpbrk - finds first matching char in string
 * @s: input string to search for matching char
 * @accept: characters that could be matched
 * Return: pointer to matching char
 */

char *_strpbrk(char *s, char *accept)
{
	unsigned int i, j;

	for (i = 0; s[i] != '\0'; i++)
		for (j = 0; accept[j] != '\0'; j++)
			if (s[i] == accept[j])
				goto exit;
exit: return (s[i] != '\0' ? s + i : '\0');
}

5-strstr.c/     1667975937  1000  1000  100664  530       `
#include "main.h"

/**
 * _strstr - returns pointer to first char of matching substring
 * @haystack: string to find substring in
 * @needle: substring to find match of
 * Return: pointer to first char of matching substring
 */

char *_strstr(char *haystack, char *needle)
{
	int k;

	while (*haystack != '\0')
	{
		k = 0;
		while (*haystack == *needle && *haystack != '\0' && *needle != '\0')
			haystack++, needle++, k++;
		if (*needle == '\0')
			return (haystack - k);
		haystack -= (k - 1), needle -= k;
	}
	return ('\0');
}
6-abs.c/        1667975286  1000  1000  100664  223       `
#include "main.h"

/**
 * _abs - find the abs of the int
 * @i: i is an integer
 *
 * Return: integer
 */

int _abs(int i)
{
	if (i > 0)
	{
		return (i);
	}
	else if (i < 0)
	{
		return (-i);
	}
	else
	{
		return (i);
	}
}

9-strcpy.c/     1667975559  1000  1000  100664  313       `
#include "main.h"

/**
 * _strcpy - copies the string pointed to by src into dest
 * @dest: destination
 * @src: source
 * Return: char with copy of string
 */

char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; *(src + i) != '\0'; i++)
	{
		dest[i] = *(src + i);
	}
	dest[i] = '\0';

	return (dest);
}

